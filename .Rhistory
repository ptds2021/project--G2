min = 0,
max = 42,
value = 30,
step = 3, ticks = TRUE,
label = "Total credits"
),
sliderInput(
inputId = "CORE_credits_3",
min = 0,
max = 36,
value = 12,
step = 3, ticks = TRUE,
label = "Mandatory credits"
),
sliderInput(
inputId = "ELECTIVE_credits_3",
min = 0,
max = 24,
value = 18,
step = 3, ticks = TRUE,
label = "Elective credits"
),
#Classes choices
pickerInput(
inputId = "Classes_3",
label = "Classes:",
choices = classes_semester[[3]],
selected = classes_mandatory[[3]],
options = list(
`actions-box` = TRUE,
size = 10,
`selected-text-format` = "count > 3"
),
multiple = TRUE
),
# Moments choices
pickerInput(
inputId = "Moments_3",
label = "Day - AM/PM:",
choices = moments_semester[[3]],
selected = moments_semester[[3]],
options = list(
`actions-box` = TRUE,
size = 10,
`selected-text-format` = "count > 3"
),
multiple = TRUE
)
),
# Show a plot of the generated distribution
mainPanel(mainPanel(
tabsetPanel(
type = "tabs",
tabPanel("Visual Timetable", plotOutput("timetable_3_graph")),
tabPanel("More detailed Timetable", tableOutput("timetable_3"))
),
style = 'width: 100%'
))
)
)
server <- function(input, output, session) {
choice_1 <- eventReactive(input$submit_1,  {
hectimetables::class_optim(
1,
f.obj,
f.con,
f.dir,
input$credits_1,
input$CORE_credits_1,
input$ELECTIVE_credits_1,
input$Moments_1,
input$Classes_1
)
})
output$timetable_1 <-
renderTable({
hectimetables::display_text_timetable(1, choice_1())
})
output$timetable_1_graph <-
renderPlot({
hectimetables::display_visual_timetable(1, choice_1())
})
choice_2 <- eventReactive(input$submit_2, {
hectimetables::class_optim(
2,
f.obj,
f.con,
f.dir,
input$credits_2,
input$CORE_credits_2,
input$ELECTIVE_credits_2,
input$Moments_2,
input$Classes_2
)
})
output$timetable_2 <-
renderTable({
hectimetables::display_text_timetable(2, choice_2())
})
output$timetable_2_graph <-
renderPlot({
hectimetables::display_visual_timetable(2, choice_2())
})
choice_3 <- eventReactive(input$submit_3, {
hectimetables::class_optim(
3,
f.obj,
f.con,
f.dir,
input$credits_3,
input$CORE_credits_3,
input$ELECTIVE_credits_3,
input$Moments_3,
input$Classes_3
)
})
output$timetable_3 <-
renderTable({
hectimetables::display_text_timetable(3, choice_3())
})
output$timetable_3_graph <-
renderPlot({
hectimetables::display_visual_timetable(3, choice_3())
})
}
devtools::install_github("ptds2021/project--G2")
library(hectimetables)
library(shinythemes)
library(shinyWidgets)
library(shiny)
hectimetables::dummy_creation()
# Define UI
ui <- navbarPage(
theme = shinytheme("cerulean"),
"HEC Lausanne - Timetable suggestions for Management students",
tabPanel(
"Semester 1",
sidebarPanel(
# ECTS choices
actionButton(inputId = "submit_1", label = "Suggest timetable!"),
helpText("If nothing is displayed, you have impossible preferences."),
hr(),
helpText("Choose here your preferences."),
sliderInput(
inputId = "credits_1",
min = 0,
max = 42,
value = 30,
step = 6, ticks = TRUE,
label = "Total credits"
),
sliderInput(
inputId = "CORE_credits_1",
min = 0,
max = 36,
value = 18,
step = 6, ticks = TRUE,
label = "Mandatory credits"
),
sliderInput(
inputId = "ELECTIVE_credits_1",
min = 0,
max = 24,
value = 12,
step = 6, ticks = TRUE,
label = "Elective credits"
),
#Classes choices
pickerInput(
inputId = "Classes_1",
label = "Classes:",
choices = classes_semester[[1]],
selected = classes_mandatory[[1]],
# Refer to mandatory classes
options = list(
`actions-box` = TRUE,
size = 10,
`selected-text-format` = "count > 3"
),
multiple = TRUE
),
# Moments choices
pickerInput(
inputId = "Moments_1",
label = "Day - AM/PM:",
choices = moments_semester[[1]],
selected = moments_semester[[1]],
options = list(
`actions-box` = TRUE,
size = 10,
`selected-text-format` = "count > 3"
),
multiple = TRUE
)
),
# Show a plot of the generated distribution
mainPanel(mainPanel(
tabsetPanel(
type = "tabs",
tabPanel("Visual Timetable", plotOutput("timetable_1_graph")),
tabPanel("More detailed Timetable", tableOutput("timetable_1"))
),
style = 'width: 100%'
))
),
tabPanel(
"Semester 2",
sidebarPanel(
# ECTS choices
actionButton(inputId = "submit_2", label = "Suggest timetable"),
sliderInput(
inputId = "credits_2",
min = 0,
max = 42,
value = 30,
step = 3, ticks = TRUE,
label = "Total credits"
),
sliderInput(
inputId = "CORE_credits_2",
min = 0,
max = 36,
value = 12,
step = 3, ticks = TRUE,
label = "Mandatory credits"
),
sliderInput(
inputId = "ELECTIVE_credits_2",
min = 0,
max = 24,
value = 18,
step = 3, ticks = TRUE,
label = "Elective credits"
),
#Classes choices
pickerInput(
inputId = "Classes_2",
label = "Classes:",
choices = classes_semester[[2]],
selected = classes_mandatory[[2]],
options = list(
`actions-box` = TRUE,
size = 10,
`selected-text-format` = "count > 3"
),
multiple = TRUE
),
# Moments choices
pickerInput(
inputId = "Moments_2",
label = "Day - AM/PM:",
choices = moments_semester[[2]],
selected = moments_semester[[2]],
options = list(
`actions-box` = TRUE,
size = 10,
`selected-text-format` = "count > 3"
),
multiple = TRUE
)
),
# Show a plot of the generated distribution
mainPanel(mainPanel(
tabsetPanel(
type = "tabs",
tabPanel("Visual Timetable", plotOutput("timetable_2_graph")),
tabPanel("More detailed Timetable", tableOutput("timetable_2"))
),
style = 'width: 100%'
))
),
tabPanel(
"Semester 3",
sidebarPanel(
actionButton(inputId = "submit_3", label = "Suggest timetable"),
# ECTS choices
sliderInput(
inputId = "credits_3",
min = 0,
max = 42,
value = 30,
step = 3, ticks = TRUE,
label = "Total credits"
),
sliderInput(
inputId = "CORE_credits_3",
min = 0,
max = 36,
value = 12,
step = 3, ticks = TRUE,
label = "Mandatory credits"
),
sliderInput(
inputId = "ELECTIVE_credits_3",
min = 0,
max = 24,
value = 18,
step = 3, ticks = TRUE,
label = "Elective credits"
),
#Classes choices
pickerInput(
inputId = "Classes_3",
label = "Classes:",
choices = classes_semester[[3]],
selected = classes_mandatory[[3]],
options = list(
`actions-box` = TRUE,
size = 10,
`selected-text-format` = "count > 3"
),
multiple = TRUE
),
# Moments choices
pickerInput(
inputId = "Moments_3",
label = "Day - AM/PM:",
choices = moments_semester[[3]],
selected = moments_semester[[3]],
options = list(
`actions-box` = TRUE,
size = 10,
`selected-text-format` = "count > 3"
),
multiple = TRUE
)
),
# Show a plot of the generated distribution
mainPanel(mainPanel(
tabsetPanel(
type = "tabs",
tabPanel("Visual Timetable", plotOutput("timetable_3_graph")),
tabPanel("More detailed Timetable", tableOutput("timetable_3"))
),
style = 'width: 100%'
))
)
)
server <- function(input, output, session) {
choice_1 <- eventReactive(input$submit_1,  {
hectimetables::class_optim(
1,
f.obj,
f.con,
f.dir,
input$credits_1,
input$CORE_credits_1,
input$ELECTIVE_credits_1,
input$Moments_1,
input$Classes_1
)
})
output$timetable_1 <-
renderTable({
hectimetables::display_text_timetable(1, choice_1())
})
output$timetable_1_graph <-
renderPlot({
hectimetables::display_visual_timetable(1, choice_1())
})
choice_2 <- eventReactive(input$submit_2, {
hectimetables::class_optim(
2,
f.obj,
f.con,
f.dir,
input$credits_2,
input$CORE_credits_2,
input$ELECTIVE_credits_2,
input$Moments_2,
input$Classes_2
)
})
output$timetable_2 <-
renderTable({
hectimetables::display_text_timetable(2, choice_2())
})
output$timetable_2_graph <-
renderPlot({
hectimetables::display_visual_timetable(2, choice_2())
})
choice_3 <- eventReactive(input$submit_3, {
hectimetables::class_optim(
3,
f.obj,
f.con,
f.dir,
input$credits_3,
input$CORE_credits_3,
input$ELECTIVE_credits_3,
input$Moments_3,
input$Classes_3
)
})
output$timetable_3 <-
renderTable({
hectimetables::display_text_timetable(3, choice_3())
})
output$timetable_3_graph <-
renderPlot({
hectimetables::display_visual_timetable(3, choice_3())
})
}
usethis::use_vignette("hectimetables")
pkgdown::build_site()
library(hectimetables)
pkgdown::build_site()
library(hectimetables)
library(hectimetables)
library(hectimetables)
library(hectimetables)
plot(cars)
devtools::document()
library(hectimetables)
runDemo()
library(hectimetables)
usethis::use_pkgdown()
library(hectimetables)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(hectimetables)
library(hectimetables)
runDemo()
usethis::use_vignette()
usethis::use_vignette("my-vignette")
library(hectimetables)
library(hectimetables)
devtools::install()
devtools::build_vignettes()
devtools::build_vignettes("hec-vignette")
devtools::build_vignettes("hectimetables")
clean_vignettes()
install.packages("build_vignettes")
devtools::build_vignettes(pkg = "hectimetables")
vignette()
pkgdown::build_site()
usethis::use_vignette("my-vignette")
library(hectimetables)
library(hectimetables)
devtools::build_vignettes()
devtools::build_vignettes("test")
devtools::build_vignettes("hectimetables")
devtools::build_vignettes("project--G2")
devtools::install_github(build_vignettes = TRUE)
devtools::install_github("ptds2021/project--G2", build_vignettes = TRUE)
remove.packages("hectimetables", lib="~/R/win-library/4.0")
remove.packages("hectimetables", lib="~/R/win-library/4.0")
devtools::install_github("ptds2021/project--G2", build_vignettes = TRUE)
usethis::use_vignette("my-vignette")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
build_favicons(pkg = ".", overwrite = FALSE)
build_favicons(pkg = "hectimetables", overwrite = FALSE)
devtools::build_favicons(pkg = "hectimetables", overwrite = FALSE)
pkgdown::build_favicons(pkg = "hectimetables", overwrite = FALSE)
pkgdown::build_favicons()
pkgdown::build_favicons()
pkgdown::build_favicons("logo.png")
pkgdown::build_favicons("hectimetables")
pkgdown::build_favicons("project--G2")
build_favicon(hectimetables, overwrite=FALSE)
build_favicon("hectimetables")
pkgdown::build_favicon()
pkgdown::build_favicon("hectimetables")
pkgdown::build_favicons("hectimetables")
pkgdown::build_favicons("hectimetables")
pkgdown::build_favicons(~/MASTER 2.1/Programming/project--G2)
library(pkgdown)
pkgdown::build_favicons(pkg = "project--G2", overwrite = FALSE)
library(hectimetables)
pkgdown::build_favicons(pkg = "hectimetables", overwrite = FALSE)
build_home()
build_home()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(hectimetables)
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
init_site()
pkgdown::build_site()
build_site()
build_site()
build_site()
library(hectimetables)
build_site()
remotes::install_github("ptds2021/project--G2")
remove.packages("hectimetables", lib="~/R/win-library/4.0")
remotes::install_github("ptds2021/project--G2")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site(new_process = FALSE)
deploy_site_github()
devtools::deploy_site_github()
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
deploy_to_branch()
usethis::deploy_to_branch()
pkgdown::deploy_to_branch()
pkgdown::build_site()
