library("hectimetables")
library("shiny")
# Obtain the dummies and all necessary variables from this package
hectimetables::dummy_creation()
# Chunk 2
choice_ui <- function(id) {
ns <- NS(id)
tagList(
sidebarPanel("Choose here how many credits to do, and which classes and when!",
sliderInput(ns("credits"), min = 0, max = 42, value = 30, label = "Total credits"),
sliderInput(ns("CORE_credits"), min = 0, max = 36, value = 18, label = "Mandatory credits"),
sliderInput(ns("ELECTIVE_credits"), min = 0, max = 24, value = 12, label = "Elective credits"),
pickerInput(ns("Classes"), label = "Classes:", choices = classes_semester[[1]],
multiple = TRUE, selected = classes_mandatory[[1]], # Refer to mandatory classes
options = list(`actions-box` = TRUE, size = 10, `selected-text-format` = "count > 3")),
pickerInput(ns("Moments"), label = "Day - AM/PM:", choices = moments_semester[[1]],
multiple = TRUE, selected = moments_semester[[1]],
options = list(`actions-box` = TRUE, size = 10, `selected-text-format` = "count > 3"))
)
)
}
# Chunk 3
choice_server <- function(id, r) {
moduleServer(
id,
function(input, output, session) {
# Whenever the choice changes, the value inside r is set
observeEvent( input$credits , {r$credits <- input$credits} )
observeEvent( input$CORE_credits , {r$CORE_credits <- input$CORE_credits} )
observeEvent( input$ELECTIVE_credits , {r$ELECTIVE_credits <- input$ELECTIVE_credits} )
observeEvent( input$Classes , {r$Classes <- input$Classes} )
observeEvent( input$Moments , {r$Moments <- input$Moments} )
}
)
}
# Chunk 4
printing_ui <- function(id) {
ns <- NS(id)
tagList(
helpText("If no timetable is displayed, try to relax some constraints.
Don't take too many credits per semester, a standard load is 30.
Make sure to have over semester 2 & 3 at least 36 core credits."),
mainPanel(mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Visual Timetable", plotOutput(ns("timetable_graph"))),
tabPanel("More detailed Timetable", tableOutput(ns("timetable")))),
style='width: 100%')))
}
# Chunk 5
printing_server <- function(id, r) {
moduleServer(id, function(input, output, session) {
output$timetable <- renderTable({
for (i in 1:length(moments_semester[[1]])) {
moments_constraints[[1]][i] <-
moments_semester[[1]][i] %in% r$Moments
}
for (i in 1:length(classes_semester[[id]])) {
classes_constraints[[1]][i] <-
classes_semester[[1]][i] %in% r$Classes
}
f.rhs_1 <- c(
r$credits,
r$CORE_credits,
r$ELECTIVE_credits,
length(classes_constraints[[1]]) * moments_constraints[[1]],
rep.int(1, nb_of_timeslot[[1]]),
classes_constraints[[1]]
)
# Optimization of classes in form of a textual timetable
class_1 <- hectimetables::class_optim(1, f.obj, f.con, f.dir, f.rhs_1)
hectimetables::display_text_timetable(1, class_1)
})
output$timetable_graph <- renderPlot({
for (i in 1:length(moments_semester[[1]])) {
moments_constraints[[1]][i] <-
moments_semester[[1]][i] %in% r$Moments
}
for (i in 1:length(classes_semester[[1]])) {
classes_constraints[[1]][i] <-
classes_semester[[1]][i] %in% r$Classes
}
f.rhs_1 <- c(
r$credits,
r$CORE_credits,
r$ELECTIVE_credits,
length(classes_constraints[[1]]) * moments_constraints[[1]],
rep.int(1, nb_of_timeslot[[1]]),
classes_constraints[[1]]
)
class_1 <- hectimetables::class_optim(1, f.obj, f.con, f.dir, f.rhs_1)
hectimetables::display_visual_timetable(1, class_1)
})
})
}
# Chunk 6
app_ui <- function() {
tabsetPanel(
tabPanel("Semester 1",
fluidPage(
choice_ui("choice_ui_sem1"),
printing_ui("printing_ui_sem1")
)),
tabPanel("Semester 2",
fluidPage(
choice_ui("choice_ui_sem2"),
printing_ui("printing_ui_sem2")
)),
tabPanel("Semester 3",
fluidPage(
choice_ui("choice_ui_sem3"),
printing_ui("printing_ui_sem3")
))
)
}
# Chunk 7
app_server <- function(input, output, session) {
sem1 <- reactiveValues()
choice_server("choice_ui_sem1", r = sem1)
printing_server("printing_ui_sem1", r = sem1)
}
# Chunk 8
shinyApp(app_ui, app_server)
# Chunk 1
source(here::here("scripts/setup.R"))
library("hectimetables")
library("shiny")
# Obtain the dummies and all necessary variables from this package
hectimetables::dummy_creation()
# Chunk 2
choice_ui <- function(id) {
ns <- NS(id)
tagList(
sidebarPanel("Choose here how many credits to do, and which classes and when!",
sliderInput(ns("credits"), min = 0, max = 42, value = 30, label = "Total credits"),
sliderInput(ns("CORE_credits"), min = 0, max = 36, value = 18, label = "Mandatory credits"),
sliderInput(ns("ELECTIVE_credits"), min = 0, max = 24, value = 12, label = "Elective credits"),
pickerInput(ns("Classes"), label = "Classes:", choices = classes_semester[[1]],
multiple = TRUE, selected = classes_mandatory[[1]], # Refer to mandatory classes
options = list(`actions-box` = TRUE, size = 10, `selected-text-format` = "count > 3")),
pickerInput(ns("Moments"), label = "Day - AM/PM:", choices = moments_semester[[1]],
multiple = TRUE, selected = moments_semester[[1]],
options = list(`actions-box` = TRUE, size = 10, `selected-text-format` = "count > 3"))
)
)
}
# Chunk 3
choice_server <- function(id, r) {
moduleServer(
id,
function(input, output, session) {
# Whenever the choice changes, the value inside r is set
observeEvent( input$credits , {r$credits <- input$credits} )
observeEvent( input$CORE_credits , {r$CORE_credits <- input$CORE_credits} )
observeEvent( input$ELECTIVE_credits , {r$ELECTIVE_credits <- input$ELECTIVE_credits} )
observeEvent( input$Classes , {r$Classes <- input$Classes} )
observeEvent( input$Moments , {r$Moments <- input$Moments} )
}
)
}
# Chunk 4
printing_ui <- function(id) {
ns <- NS(id)
tagList(
helpText("If no timetable is displayed, try to relax some constraints.
Don't take too many credits per semester, a standard load is 30.
Make sure to have over semester 2 & 3 at least 36 core credits."),
mainPanel(mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Visual Timetable", plotOutput(ns("timetable_graph"))),
tabPanel("More detailed Timetable", tableOutput(ns("timetable")))),
style='width: 100%')))
}
# Chunk 5
printing_server <- function(id, r) {
moduleServer(id, function(input, output, session) {
output$timetable <- renderTable({
for (i in 1:length(moments_semester[[1]])) {
moments_constraints[[1]][i] <-
moments_semester[[1]][i] %in% r$Moments
}
for (i in 1:length(classes_semester[[id]])) {
classes_constraints[[1]][i] <-
classes_semester[[1]][i] %in% r$Classes
}
f.rhs_1 <- c(
r$credits,
r$CORE_credits,
r$ELECTIVE_credits,
length(classes_constraints[[1]]) * moments_constraints[[1]],
rep.int(1, nb_of_timeslot[[1]]),
classes_constraints[[1]]
)
# Optimization of classes in form of a textual timetable
class_1 <- hectimetables::class_optim(1, f.obj, f.con, f.dir, f.rhs_1)
hectimetables::display_text_timetable(1, class_1)
})
output$timetable_graph <- renderPlot({
for (i in 1:length(moments_semester[[1]])) {
moments_constraints[[1]][i] <-
moments_semester[[1]][i] %in% r$Moments
}
for (i in 1:length(classes_semester[[1]])) {
classes_constraints[[1]][i] <-
classes_semester[[1]][i] %in% r$Classes
}
f.rhs_1 <- c(
r$credits,
r$CORE_credits,
r$ELECTIVE_credits,
length(classes_constraints[[1]]) * moments_constraints[[1]],
rep.int(1, nb_of_timeslot[[1]]),
classes_constraints[[1]]
)
class_1 <- hectimetables::class_optim(1, f.obj, f.con, f.dir, f.rhs_1)
hectimetables::display_visual_timetable(1, class_1)
})
})
}
# Chunk 6
app_ui <- function() {
tabsetPanel(
tabPanel("Semester 1",
fluidPage(
choice_ui("choice_ui_sem1"),
printing_ui("printing_ui_sem1")
)),
tabPanel("Semester 2",
fluidPage(
choice_ui("choice_ui_sem2"),
printing_ui("printing_ui_sem2")
)),
tabPanel("Semester 3",
fluidPage(
choice_ui("choice_ui_sem3"),
printing_ui("printing_ui_sem3")
))
)
}
# Chunk 7
app_server <- function(input, output, session) {
sem1 <- reactiveValues()
choice_server("choice_ui_sem1", r = sem1)
printing_server("printing_ui_sem1", r = sem1)
sem2 <- reactiveValues()
choice_server("choice_ui_sem2", r = sem2)
printing_server("printing_ui_sem2", r = sem2)
sem3 <- reactiveValues()
choice_server("choice_ui_sem3", r = sem3)
printing_server("printing_ui_sem3", r = sem3)
}
# Chunk 8
shinyApp(app_ui, app_server)
# Chunk 1
source(here::here("scripts/setup.R"))
library("hectimetables")
library("shiny")
# Obtain the dummies and all necessary variables from this package
hectimetables::dummy_creation()
# Chunk 2
choice_ui <- function(id) {
ns <- NS(id)
tagList(
sidebarPanel("Choose here how many credits to do, and which classes and when!",
sliderInput(ns("credits"), min = 0, max = 42, value = 30, label = "Total credits"),
sliderInput(ns("CORE_credits"), min = 0, max = 36, value = 18, label = "Mandatory credits"),
sliderInput(ns("ELECTIVE_credits"), min = 0, max = 24, value = 12, label = "Elective credits"),
pickerInput(ns("Classes"), label = "Classes:", choices = classes_semester[[1]],
multiple = TRUE, selected = classes_mandatory[[1]], # Refer to mandatory classes
options = list(`actions-box` = TRUE, size = 10, `selected-text-format` = "count > 3")),
pickerInput(ns("Moments"), label = "Day - AM/PM:", choices = moments_semester[[1]],
multiple = TRUE, selected = moments_semester[[1]],
options = list(`actions-box` = TRUE, size = 10, `selected-text-format` = "count > 3"))
)
)
}
# Chunk 3
choice_server <- function(id, r) {
moduleServer(
id,
function(input, output, session) {
# Whenever the choice changes, the value inside r is set
observeEvent( input$credits , {r$credits <- input$credits} )
observeEvent( input$CORE_credits , {r$CORE_credits <- input$CORE_credits} )
observeEvent( input$ELECTIVE_credits , {r$ELECTIVE_credits <- input$ELECTIVE_credits} )
observeEvent( input$Classes , {r$Classes <- input$Classes} )
observeEvent( input$Moments , {r$Moments <- input$Moments} )
}
)
}
# Chunk 4
printing_ui <- function(id) {
ns <- NS(id)
tagList(
helpText("If no timetable is displayed, try to relax some constraints.
Don't take too many credits per semester, a standard load is 30.
Make sure to have over semester 2 & 3 at least 36 core credits."),
mainPanel(mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Visual Timetable", plotOutput(ns("timetable_graph"))),
tabPanel("More detailed Timetable", tableOutput(ns("timetable")))),
style='width: 100%')))
}
# Chunk 5
printing_server <- function(id, r) {
moduleServer(id, function(input, output, session) {
output$timetable <- renderTable({
for (i in 1:length(moments_semester[[1]])) {
moments_constraints[[1]][i] <-
moments_semester[[1]][i] %in% r$Moments
}
for (i in 1:length(classes_semester[[id]])) {
classes_constraints[[1]][i] <-
classes_semester[[1]][i] %in% r$Classes
}
f.rhs_1 <- c(
r$credits,
r$CORE_credits,
r$ELECTIVE_credits,
length(classes_constraints[[1]]) * moments_constraints[[1]],
rep.int(1, nb_of_timeslot[[1]]),
classes_constraints[[1]]
)
# Optimization of classes in form of a textual timetable
class_1 <- hectimetables::class_optim(1, f.obj, f.con, f.dir, f.rhs_1)
hectimetables::display_text_timetable(1, class_1)
})
output$timetable_graph <- renderPlot({
for (i in 1:length(moments_semester[[1]])) {
moments_constraints[[1]][i] <-
moments_semester[[1]][i] %in% r$Moments
}
for (i in 1:length(classes_semester[[1]])) {
classes_constraints[[1]][i] <-
classes_semester[[1]][i] %in% r$Classes
}
f.rhs_1 <- c(
r$credits,
r$CORE_credits,
r$ELECTIVE_credits,
length(classes_constraints[[1]]) * moments_constraints[[1]],
rep.int(1, nb_of_timeslot[[1]]),
classes_constraints[[1]]
)
class_1 <- hectimetables::class_optim(1, f.obj, f.con, f.dir, f.rhs_1)
hectimetables::display_visual_timetable(1, class_1)
})
})
}
# Chunk 6
app_ui <- function() {
tabsetPanel(
tabPanel("Semester 1",
fluidPage(
choice_ui("choice_ui_1"),
printing_ui("printing_ui_1")
)),
tabPanel("Semester 2",
fluidPage(
choice_ui("choice_ui_2"),
printing_ui("printing_ui_2")
)),
tabPanel("Semester 3",
fluidPage(
choice_ui("choice_ui_3"),
printing_ui("printing_ui_3")
))
)
}
# Chunk 7
app_server <- function(input, output, session) {
1 <- reactiveValues()
choice_server("choice_ui_1", r = 1)
printing_server("printing_ui_1", r = 1)
2 <- reactiveValues()
choice_server("choice_ui_2", r = 2)
printing_server("printing_ui_2", r = 2)
3 <- reactiveValues()
choice_server("choice_ui_3", r = 3)
printing_server("printing_ui_3", r = 3)
}
# Chunk 8
shinyApp(app_ui, app_server)
# Chunk 1
source(here::here("scripts/setup.R"))
library("hectimetables")
library("shiny")
# Obtain the dummies and all necessary variables from this package
hectimetables::dummy_creation()
# Chunk 2
choice_ui <- function(id) {
ns <- NS(id)
tagList(
sidebarPanel("Choose here how many credits to do, and which classes and when!",
sliderInput(ns("credits"), min = 0, max = 42, value = 30, label = "Total credits"),
sliderInput(ns("CORE_credits"), min = 0, max = 36, value = 18, label = "Mandatory credits"),
sliderInput(ns("ELECTIVE_credits"), min = 0, max = 24, value = 12, label = "Elective credits"),
pickerInput(ns("Classes"), label = "Classes:", choices = classes_semester[[1]],
multiple = TRUE, selected = classes_mandatory[[1]], # Refer to mandatory classes
options = list(`actions-box` = TRUE, size = 10, `selected-text-format` = "count > 3")),
pickerInput(ns("Moments"), label = "Day - AM/PM:", choices = moments_semester[[1]],
multiple = TRUE, selected = moments_semester[[1]],
options = list(`actions-box` = TRUE, size = 10, `selected-text-format` = "count > 3"))
)
)
}
# Chunk 3
choice_server <- function(id, r) {
moduleServer(
id,
function(input, output, session) {
# Whenever the choice changes, the value inside r is set
observeEvent( input$credits , {r$credits <- input$credits} )
observeEvent( input$CORE_credits , {r$CORE_credits <- input$CORE_credits} )
observeEvent( input$ELECTIVE_credits , {r$ELECTIVE_credits <- input$ELECTIVE_credits} )
observeEvent( input$Classes , {r$Classes <- input$Classes} )
observeEvent( input$Moments , {r$Moments <- input$Moments} )
}
)
}
# Chunk 4
printing_ui <- function(id) {
ns <- NS(id)
tagList(
helpText("If no timetable is displayed, try to relax some constraints.
Don't take too many credits per semester, a standard load is 30.
Make sure to have over semester 2 & 3 at least 36 core credits."),
mainPanel(mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Visual Timetable", plotOutput(ns("timetable_graph"))),
tabPanel("More detailed Timetable", tableOutput(ns("timetable")))),
style='width: 100%')))
}
# Chunk 5
printing_server <- function(id, r) {
moduleServer(id, function(input, output, session) {
output$timetable <- renderTable({
for (i in 1:length(moments_semester[[1]])) {
moments_constraints[[1]][i] <-
moments_semester[[1]][i] %in% r$Moments
}
for (i in 1:length(classes_semester[[id]])) {
classes_constraints[[1]][i] <-
classes_semester[[1]][i] %in% r$Classes
}
f.rhs_1 <- c(
r$credits,
r$CORE_credits,
r$ELECTIVE_credits,
length(classes_constraints[[1]]) * moments_constraints[[1]],
rep.int(1, nb_of_timeslot[[1]]),
classes_constraints[[1]]
)
# Optimization of classes in form of a textual timetable
class_1 <- hectimetables::class_optim(1, f.obj, f.con, f.dir, f.rhs_1)
hectimetables::display_text_timetable(1, class_1)
})
output$timetable_graph <- renderPlot({
for (i in 1:length(moments_semester[[1]])) {
moments_constraints[[1]][i] <-
moments_semester[[1]][i] %in% r$Moments
}
for (i in 1:length(classes_semester[[1]])) {
classes_constraints[[1]][i] <-
classes_semester[[1]][i] %in% r$Classes
}
f.rhs_1 <- c(
r$credits,
r$CORE_credits,
r$ELECTIVE_credits,
length(classes_constraints[[1]]) * moments_constraints[[1]],
rep.int(1, nb_of_timeslot[[1]]),
classes_constraints[[1]]
)
class_1 <- hectimetables::class_optim(1, f.obj, f.con, f.dir, f.rhs_1)
hectimetables::display_visual_timetable(1, class_1)
})
})
}
# Chunk 6
app_ui <- function() {
tabsetPanel(
tabPanel("Semester 1",
fluidPage(
choice_ui("choice_ui_s1"),
printing_ui("printing_ui_s1")
)),
tabPanel("Semester 2",
fluidPage(
choice_ui("choice_ui_s2"),
printing_ui("printing_ui_s2")
)),
tabPanel("Semester 3",
fluidPage(
choice_ui("choice_ui_s3"),
printing_ui("printing_ui_s3")
))
)
}
# Chunk 7
app_server <- function(input, output, session) {
s1 <- reactiveValues()
choice_server("choice_ui_1", r = s1)
printing_server("printing_ui_1", r = s1)
s2 <- reactiveValues()
choice_server("choice_ui_2", r = s2)
printing_server("printing_ui_2", r = s2)
s3 <- reactiveValues()
choice_server("choice_ui_3", r = s3)
printing_server("printing_ui_3", r = s3)
}
# Chunk 8
shinyApp(app_ui, app_server)
